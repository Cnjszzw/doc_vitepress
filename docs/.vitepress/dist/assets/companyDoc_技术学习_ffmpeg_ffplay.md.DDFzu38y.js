import{_ as e,c as p,o as l,ae as i}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"ffmpeg & ffplay","description":"","frontmatter":{},"headers":[],"relativePath":"companyDoc/技术学习/ffmpeg&ffplay.md","filePath":"companyDoc/技术学习/ffmpeg&ffplay.md"}'),s={name:"companyDoc/技术学习/ffmpeg&ffplay.md"};function t(f,a,o,n,h,r){return l(),p("div",null,a[0]||(a[0]=[i('<h1 id="ffmpeg-ffplay" tabindex="-1">ffmpeg &amp; ffplay <a class="header-anchor" href="#ffmpeg-ffplay" aria-label="Permalink to &quot;ffmpeg &amp; ffplay&quot;">​</a></h1><blockquote><p>参考文章如下：</p><div class="language-url vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">url</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://blog.csdn.net/leixiaohua1020/article/details/15811977</span></span></code></pre></div></blockquote><h2 id="〇、背景介绍" tabindex="-1">〇、背景介绍 <a class="header-anchor" href="#〇、背景介绍" aria-label="Permalink to &quot;〇、背景介绍&quot;">​</a></h2><p>本章主要介绍一下FFMPEG都用在了哪里（在这里仅列几个我所知的，其实远比这个多）。说白了就是为了说明：FFMPEG是非常重要的。</p><p>使用FFMPEG作为内核视频播放器：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Mplayer，ffplay，射手播放器，暴风影音，KMPlayer，QQ影音...</span></span></code></pre></div><p>使用FFMPEG作为内核的Directshow Filter：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ffdshow，lav filters...</span></span></code></pre></div><p>使用FFMPEG作为内核的转码工具：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ffmpeg，格式工厂...</span></span></code></pre></div><p>事实上，FFMPEG的视音频编解码功能确实太强大了，几乎囊括了现存所有的视音频编码标准，因此只要做视音频开发，几乎离不开它。</p><h2 id="一、核心信息" tabindex="-1">一、核心信息 <a class="header-anchor" href="#一、核心信息" aria-label="Permalink to &quot;一、核心信息&quot;">​</a></h2><p>FFmpeg和ffplay是多媒体处理领域的重要工具，以下是它们的核心信息：</p><h3 id="_1-ffmpeg" tabindex="-1">1. <strong>FFmpeg</strong> <a class="header-anchor" href="#_1-ffmpeg" aria-label="Permalink to &quot;1. **FFmpeg**&quot;">​</a></h3><ul><li>定位 ：开源多媒体框架，提供音视频录制、转换、流媒体传输等功能。</li><li>核心能力 ： <ul><li>支持多种格式编解码（通过<code>libavcodec</code>等库）。</li><li>可处理音视频剪辑、转码、压缩等操作。</li><li>被广泛应用于视频平台（如YouTube）、播放器（如VLC）等。</li></ul></li></ul><h3 id="_2-ffplay" tabindex="-1">2. <strong>ffplay</strong> <a class="header-anchor" href="#_2-ffplay" aria-label="Permalink to &quot;2. **ffplay**&quot;">​</a></h3><ul><li>定位 ：基于FFmpeg和SDL库的轻量级播放器，主要用于开发测试。</li><li>特点 ： <ul><li>支持本地文件与在线流媒体播放（如RTMP）。</li><li>提供解码、渲染、同步等播放器核心逻辑的参考实现。</li><li>开发者常通过分析其源码学习播放器架构。</li></ul></li></ul><h2 id="二、二者关系" tabindex="-1">二、<strong>二者关系</strong> <a class="header-anchor" href="#二、二者关系" aria-label="Permalink to &quot;二、**二者关系**&quot;">​</a></h2><ul><li>ffplay是FFmpeg项目的子工具，依赖FFmpeg的解码能力。</li><li>FFmpeg负责底层处理（如解码），ffplay负责渲染与交互。</li></ul><p><strong>示例场景</strong> ：</p><ul><li>用FFmpeg将视频转为MP4格式：<code>ffmpeg -i input.avi output.mp4</code>。</li><li>用ffplay直接播放网络流：<code>ffplay rtmp://live.example.com/stream</code>。</li></ul><p>两者均是开源工具，适合开发者、多媒体工程师或技术爱好者使用。</p><h2 id="三、-ffmpeg程序的使用-ffmpeg-exe-ffplay-exe-ffprobe-exe" tabindex="-1">三、 ffmpeg程序的使用（ffmpeg.exe，ffplay.exe，ffprobe.exe） <a class="header-anchor" href="#三、-ffmpeg程序的使用-ffmpeg-exe-ffplay-exe-ffprobe-exe" aria-label="Permalink to &quot;三、 ffmpeg程序的使用（ffmpeg.exe，ffplay.exe，ffprobe.exe）&quot;">​</a></h2><h3 id="_3-1-ffmpeg-exe" tabindex="-1">3.1 ffmpeg.exe <a class="header-anchor" href="#_3-1-ffmpeg-exe" aria-label="Permalink to &quot;3.1 ffmpeg.exe&quot;">​</a></h3><p>ffmpeg是用于转码的应用程序。</p><p>一个简单的转码命令可以这样写：</p><p>将input.avi转码成output.ts，并设置视频的码率为640kbps</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.avi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b:v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 640k</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.ts</span></span></code></pre></div><h3 id="_3-2-ffplay-exe" tabindex="-1"><strong>3.2 ffplay.exe</strong> <a class="header-anchor" href="#_3-2-ffplay-exe" aria-label="Permalink to &quot;**3.2 ffplay.exe**&quot;">​</a></h3><p>ffplay是用于播放的应用程序。</p><p>一个简单的播放命令可以这样写：</p><p>播放test.avi</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffplay</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.avi</span></span></code></pre></div><h3 id="_3-3-ffprobe-exe" tabindex="-1"><strong>3.3 ffprobe.exe</strong> <a class="header-anchor" href="#_3-3-ffprobe-exe" aria-label="Permalink to &quot;**3.3 ffprobe.exe**&quot;">​</a></h3><p>ffprobe是用于查看文件格式的应用程序。</p><p>这个就不多介绍了。</p><h2 id="四、ffmpeg库的使用-视频播放器" tabindex="-1">四、ffmpeg库的使用：视频播放器 <a class="header-anchor" href="#四、ffmpeg库的使用-视频播放器" aria-label="Permalink to &quot;四、ffmpeg库的使用：视频播放器&quot;">​</a></h2><h2 id="x-q-a" tabindex="-1">X. Q &amp; A <a class="header-anchor" href="#x-q-a" aria-label="Permalink to &quot;X. Q &amp; A&quot;">​</a></h2><h3 id="_1-我们的项目中有使用ffmpeg这个库吗-如果有-在哪里使用的-怎么使用的" tabindex="-1">1.我们的项目中有使用ffmpeg这个库吗，如果有，在哪里使用的，怎么使用的？ <a class="header-anchor" href="#_1-我们的项目中有使用ffmpeg这个库吗-如果有-在哪里使用的-怎么使用的" aria-label="Permalink to &quot;1.我们的项目中有使用ffmpeg这个库吗，如果有，在哪里使用的，怎么使用的？&quot;">​</a></h3>',39)]))}const g=e(s,[["render",t]]);export{c as __pageData,g as default};
