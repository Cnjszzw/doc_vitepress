import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.Dh1jimFm.js";const l="/assets/image-20250424163117097.CR1tLuna.png",p="/assets/image-20250424163957660.Bup3rHUF.png",e="/assets/image-20250424164229716.Vh7WhKqB.png",h="/assets/image-20250424164742459.CHEc1TOs.png",k="/assets/image-20250424171028982.B0dOgUDw.png",r="/assets/image-20250424174302295.Cy93R7re.png",o="/assets/image-20250424174114892.C2vcLtln.png",m=JSON.parse('{"title":"Websocket学习文档","description":"","frontmatter":{},"headers":[],"relativePath":"companyDoc/技术学习/Websocket.md","filePath":"companyDoc/技术学习/Websocket.md"}'),d={name:"companyDoc/技术学习/Websocket.md"};function E(g,s,c,y,u,b){return t(),a("div",null,s[0]||(s[0]=[n('<h1 id="websocket学习文档" tabindex="-1">Websocket学习文档 <a class="header-anchor" href="#websocket学习文档" aria-label="Permalink to &quot;Websocket学习文档&quot;">​</a></h1><blockquote><p>参考视频</p><div class="language-url vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">url</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>【黑马java实战教程，教你快速上手新项目，使用websocket搭建在线聊天室】 https://www.bilibili.com/video/BV1KN411n7WD/?share_source=copy_web&amp;vd_source=f7f48f1ed79263bbbc17c452084e9965</span></span></code></pre></div></blockquote><h2 id="一、消息推送常用方式介绍" tabindex="-1">一、消息推送常用方式介绍 <a class="header-anchor" href="#一、消息推送常用方式介绍" aria-label="Permalink to &quot;一、消息推送常用方式介绍&quot;">​</a></h2><ul><li>轮询</li><li>长轮询</li></ul><p><img src="'+l+'" alt="image-20250424163117097"></p><ul><li><p>websocket</p></li><li><p>SSE(server-sentevent):服务器发送事件（有点像一点点追加信息的感觉）</p><ul><li>SSE在服务器和客户端之间打开一个单向通道(服务器向客户端)</li><li>服务端响应的不再是一次性的数据包，而是text/event-stream类型的数据流信息服务器</li><li>数据变更时将数据流式传输到客户端</li></ul></li></ul><h2 id="二、websocket介绍" tabindex="-1">二、websocket介绍 <a class="header-anchor" href="#二、websocket介绍" aria-label="Permalink to &quot;二、websocket介绍&quot;">​</a></h2><p>WebSocket是一种在基于TCP连接上进行全双工通信的协议</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p></p><p>全双工（Full Duplex）：允许数据在两个方向上同时传输。半双工（Half Duplex）：允许数据在两个方向上传输，但是同一个时间段内只允许一个方向上传输。</p></div><p><img src="'+p+'" alt="image-20250424163957660"></p><p>websocket协议，也是从http升级而来的，有一次http的握手</p><p><img src="'+e+'" alt="image-20250424164229716"></p><h2 id="三、websocketapi" tabindex="-1">三、websocketAPI <a class="header-anchor" href="#三、websocketapi" aria-label="Permalink to &quot;三、websocketAPI&quot;">​</a></h2><h3 id="客户端【浏览器】api" tabindex="-1">客户端【浏览器】API <a class="header-anchor" href="#客户端【浏览器】api" aria-label="Permalink to &quot;客户端【浏览器】API&quot;">​</a></h3><blockquote><p>一般主流的浏览器都用了html5，html5原生支持ws协议</p></blockquote><p><img src="'+h+`" alt="image-20250424164742459"></p><h3 id="服务端api" tabindex="-1">服务端API <a class="header-anchor" href="#服务端api" aria-label="Permalink to &quot;服务端API&quot;">​</a></h3><p>Tomcat的7.0.5 版本开始支持WebSocket,并且实现了Java WebSocket规范。</p><p>Java WebSocket应用由一系列的Endpoint组成。Endpoint 是一个java对象，代表WebSocket链接的一端，对于服务端，我们可以视为处理具体WebSocket消息的接口。</p><p>我们可以通过两种方式定义Endpoint:</p><ul><li>第一种是编程式， 即继承类 javax.websocket.Endpoint并实现其方法。</li><li>第二种是注解式, 即定义一个POJO, 并添加 @ServerEndpoint相关注解。</li></ul><p>Endpoint实例在WebSocket握手时创建，并在客户端与服务端链接过程中有效，最后在链接关闭时结束。在Endpoint接口中明确定义了与其生命周期相关的方法， 规范实现者确保生命周期的各个阶段调用实例的相关方法。生命周期方法如下：</p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p></p><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th><th><strong>注解</strong></th></tr></thead><tbody><tr><td>onOpen()</td><td>当开启一个新的会话时调用，该方法是客户端与服务端握手成功后调用的方法</td><td>@OnOpen</td></tr><tr><td>onClose()</td><td>当会话关闭时调用</td><td>@OnClose</td></tr><tr><td>onError()</td><td>当连接过程异常时调用</td><td>@OnError</td></tr></tbody></table></div><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p></p><p><strong>服务端如何接收客户端发送的数据呢？</strong></p></div><ul><li><p>编程式</p><ul><li>通过添加 MessageHandler 消息处理器来接收消息</li></ul></li><li><p>注解式</p><ul><li>在定义Endpoint时，通过@OnMessage注解指定接收消息的方法</li></ul></li></ul><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p></p><p><strong>服务端如何推送数据给客户端呢？</strong></p></div><p>发送消息则由 RemoteEndpoint 完成， 其实例由 Session 维护。发送消息有2种方式发送消息</p><ul><li><p>通过session.getBasicRemote 获取同步消息发送的实例 ， 然后调用其 sendXxx()方法发送消息</p></li><li><p>通过session.getAsyncRemote 获取异步消息发送实例，然后调用其 sendXxx() 方法发送消息</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ServerEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/chat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChatEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OnOpen</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 连接建立时被调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onOpen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Session </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, EndpointConfig </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OnMessage</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 接收到客户端发送的数据时被调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OnClose</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 连接关闭时被调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Session </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="四、在线聊天室" tabindex="-1">四、在线聊天室 <a class="header-anchor" href="#四、在线聊天室" aria-label="Permalink to &quot;四、在线聊天室&quot;">​</a></h2><ul><li>流程分析</li></ul><p>注意，OnError更正为**<code>OnClose</code>**</p><p><img src="`+k+`" alt="image-20250424171028982"></p><ul><li><p>消息格式</p><ul><li><p>客户端 <code>--&gt;</code> 服务端</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;toName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>服务端 <code>--&gt;</code> 客户端</p><p><strong>系统消息格式</strong>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;fromName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;message&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">：[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;李四&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;王五&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>推送给某一个用户的消息格式</strong>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;fromName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;message&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;你好&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li><p>代码实现</p><ul><li><p>引入坐标</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-starter-websocket&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="`+r+`" alt="image-20250424174302295"></p></li><li><p>编写配置类，扫描添加有@ServerEndpoint注解的 Bean</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebSocketConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 注入 ServerEndpointExporter，自动注册使用@ServerEndpoint注解的 Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServerEndpointExporter </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serverEndpointExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServerEndpointExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+o+`" alt="image-20250424174114892"></p></li><li><p>编写配置类，用于获取 HttpSession 对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetHttpSessionConfigurator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServerEndpointConfig.Configurator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modifyHandshake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServerEndpointConfig </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HandshakeRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HandshakeResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        HttpSession httpSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (HttpSession) request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHttpSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将 HttpSession 对象存储到配置对象中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSession.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), httpSession);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在 @ServerEndpoint 注解中引入配置器</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ServerEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/chat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">configurator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GetHttpSessionConfigurator.class)</span></span></code></pre></div></li></ul></li></ul>`,34)]))}const v=i(d,[["render",E]]);export{m as __pageData,v as default};
