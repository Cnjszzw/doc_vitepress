import{_ as a,c as l,o as e,ae as n}from"./chunks/framework.Dh1jimFm.js";const h=JSON.parse('{"title":"安卓开发","description":"","frontmatter":{},"headers":[],"relativePath":"companyDoc/技术学习/安卓开发.md","filePath":"companyDoc/技术学习/安卓开发.md"}'),i={name:"companyDoc/技术学习/安卓开发.md"};function s(r,t,o,d,p,c){return e(),l("div",null,t[0]||(t[0]=[n(`<h1 id="安卓开发" tabindex="-1">安卓开发 <a class="header-anchor" href="#安卓开发" aria-label="Permalink to &quot;安卓开发&quot;">​</a></h1><h2 id="一、项目配置" tabindex="-1">一、项目配置 <a class="header-anchor" href="#一、项目配置" aria-label="Permalink to &quot;一、项目配置&quot;">​</a></h2><p>运行的时候，要改下配置文件</p><p><code>build.gradle</code></p><div class="language-gradle vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gradle</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span>
<span class="line"><span>buildscript {</span></span>
<span class="line"><span>    repositories {</span></span>
<span class="line"><span>        google()</span></span>
<span class="line"><span>        mavenCentral()</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    dependencies {</span></span>
<span class="line"><span>        classpath &quot;com.android.tools.build:gradle:4.1.3&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // NOTE: Do not place your application dependencies here; they belong</span></span>
<span class="line"><span>        // in the individual module build.gradle files</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>allprojects {</span></span>
<span class="line"><span>    repositories {</span></span>
<span class="line"><span>        google()</span></span>
<span class="line"><span>        mavenCentral()</span></span>
<span class="line"><span>        maven { url &quot;https://jitpack.io&quot; }</span></span>
<span class="line"><span>        maven { url &#39;https://maven.aliyun.com/repository/public&#39;}</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>task clean(type: Delete) {</span></span>
<span class="line"><span>    delete rootProject.buildDir</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="x、q-a" tabindex="-1">X、Q&amp;A <a class="header-anchor" href="#x、q-a" aria-label="Permalink to &quot;X、Q&amp;A&quot;">​</a></h2><h3 id="_1-安卓app我看用的是java语言-为啥我听说还有用flutter写的-原生java又是什么概念" tabindex="-1">1.安卓app我看用的是java语言，为啥我听说还有用flutter写的，原生java又是什么概念 <a class="header-anchor" href="#_1-安卓app我看用的是java语言-为啥我听说还有用flutter写的-原生java又是什么概念" aria-label="Permalink to &quot;1.安卓app我看用的是java语言，为啥我听说还有用flutter写的，原生java又是什么概念&quot;">​</a></h3><h4 id="一、原生java开发-native-java" tabindex="-1">一、原生Java开发（Native Java） <a class="header-anchor" href="#一、原生java开发-native-java" aria-label="Permalink to &quot;一、原生Java开发（Native Java）&quot;">​</a></h4><ol><li><strong>本质</strong> ：</li></ol><ul><li>使用Android SDK提供的API和工具进行开发</li><li>传统安卓开发方式，直接调用系统底层功能</li><li>现代开发已逐渐转向Kotlin（官方推荐），但Java仍被广泛支持</li></ul><ol><li><strong>特点</strong> ：</li></ol><ul><li><strong>性能最优</strong> ：直接编译为机器码，无中间层损耗</li><li><strong>深度整合</strong> ：完美适配Android系统特性（如通知系统、硬件传感器）</li><li><strong>开发成本</strong> ：需单独维护Android/iOS两套代码（iOS用Swift/Objective-C）</li></ul><ol><li><strong>典型场景</strong> ：</li></ol><ul><li>对性能要求极高的应用（游戏、图像处理）</li><li>需要深度调用系统级功能的场景（设备管理、底层网络）</li></ul><h4 id="二、flutter框架开发" tabindex="-1">二、Flutter框架开发 <a class="header-anchor" href="#二、flutter框架开发" aria-label="Permalink to &quot;二、Flutter框架开发&quot;">​</a></h4><ol><li><strong>技术特性</strong> ：</li></ol><ul><li>谷歌开源的跨平台框架（2017年发布）</li><li>使用Dart语言开发，单代码库适配多平台</li><li>自带渲染引擎，不依赖原生UI组件</li></ul><ol><li><strong>核心优势</strong> ：</li></ol><ul><li><strong>开发效率</strong> ：一套代码同时生成Android/iOS/Web/Linux等版本</li><li><strong>UI一致性</strong> ：像素级渲染控制，避免不同平台UI差异</li><li><strong>热重载</strong> ：实时查看代码修改效果（提升30-50%开发效率）</li></ul><ol><li><strong>性能表现</strong> ：</li></ol><ul><li>通过Skia引擎直接绘制UI，接近原生性能（约90%原生流畅度）</li><li>复杂动画/计算密集型场景可能略逊于原生</li></ul><h4 id="三、技术选型对比" tabindex="-1">三、技术选型对比 <a class="header-anchor" href="#三、技术选型对比" aria-label="Permalink to &quot;三、技术选型对比&quot;">​</a></h4><table tabindex="0"><thead><tr><th>维度</th><th>原生开发</th><th>Flutter</th></tr></thead><tbody><tr><td>开发效率</td><td>低（需维护多平台）</td><td>高（单代码库）</td></tr><tr><td>性能表现</td><td>优异（接近硬件极限）</td><td>优秀（轻微抽象层损耗）</td></tr><tr><td>UI一致性</td><td>需适配各平台规范</td><td>完全统一的视觉效果</td></tr><tr><td>社区生态</td><td>成熟（10年以上积累）</td><td>快速发展（200w+开发者）</td></tr><tr><td>适用场景</td><td>高性能/系统级应用</td><td>多平台通用型应用</td></tr></tbody></table><h4 id="四、行业趋势洞察" tabindex="-1">四、行业趋势洞察 <a class="header-anchor" href="#四、行业趋势洞察" aria-label="Permalink to &quot;四、行业趋势洞察&quot;">​</a></h4><ol><li><strong>原生开发</strong> ：</li></ol><ul><li>逐步转向Kotlin（Android）和Swift（iOS）</li><li>重点应用于需要极致性能的垂直领域（如AR/VR、金融科技）</li></ul><ol><li><strong>跨平台方案</strong> ：</li></ol><ul><li>Flutter已成为增长最快的框架（2023年Stack Overflow调查：46%开发者采用）</li><li>React Native仍占35%市场份额，但Flutter增速更快</li></ul><ol><li><strong>混合模式</strong> ：</li></ol><ul><li>头部应用（如微信、支付宝）采用「原生+跨平台」混合架构</li><li>性能敏感模块用原生实现，业务功能用跨平台提升效率</li></ul><p>建议根据项目需求选择：</p><ul><li>需要快速验证MVP或开发资源有限 → Flutter</li><li>追求极致性能或深度系统集成 → 原生开发</li><li>大型复杂项目 → 混合架构（如闲鱼App的Flutter+Native方案）</li></ul><p>React Native 是 Facebook（现 Meta）于 2015 年推出的<strong>跨平台移动应用开发框架</strong> ，它基于 React 的核心思想，但将目标从 Web 前端扩展到了移动端。以下是关键概念和对比分析：</p><hr><h3 id="_2-react-native又是什么东西-我只知道react和vue都是web前端的框架" tabindex="-1">2.React Native又是什么东西，我只知道react和vue都是web前端的框架 <a class="header-anchor" href="#_2-react-native又是什么东西-我只知道react和vue都是web前端的框架" aria-label="Permalink to &quot;2.React Native又是什么东西，我只知道react和vue都是web前端的框架&quot;">​</a></h3><h4 id="一、react-native-的核心特性" tabindex="-1">一、React Native 的核心特性 <a class="header-anchor" href="#一、react-native-的核心特性" aria-label="Permalink to &quot;一、React Native 的核心特性&quot;">​</a></h4><ol><li><p><strong>技术基础</strong> ：</p><ul><li>使用 <strong>JavaScript + React 语法</strong> 开发，但最终渲染的是<strong>原生 UI 组件</strong> （非 WebView 或 HTML）</li><li>通过 &quot;桥接机制&quot;（Bridge）调用原生模块（如摄像头、GPS）</li></ul></li><li><p><strong>与 Web React 的区别</strong> ：</p><table tabindex="0"><thead><tr><th></th><th>Web React</th><th>React Native</th></tr></thead><tbody><tr><td>渲染目标</td><td>浏览器 DOM</td><td>原生 iOS/Android 组件</td></tr><tr><td>样式系统</td><td>CSS</td><td>类 CSS 的 JavaScript 对象</td></tr><tr><td>组件库</td><td><code>&lt;div&gt;</code>,<code>&lt;span&gt;</code></td><td><code>&lt;View&gt;</code>,<code>&lt;Text&gt;</code></td></tr></tbody></table></li><li><p><strong>开发体验</strong> ：</p><ul><li>支持热重载（Hot Reloading）</li><li>可直接调用原生代码（通过 Native Modules）</li><li>社区生态丰富（npm 包兼容性较好）</li></ul></li></ol><hr><h4 id="二、与-flutter-的关键对比" tabindex="-1">二、与 Flutter 的关键对比 <a class="header-anchor" href="#二、与-flutter-的关键对比" aria-label="Permalink to &quot;二、与 Flutter 的关键对比&quot;">​</a></h4><table tabindex="0"><thead><tr><th>维度</th><th>React Native</th><th>Flutter</th></tr></thead><tbody><tr><td><strong>语言</strong></td><td>JavaScript/TypeScript</td><td>Dart</td></tr><tr><td><strong>渲染引擎</strong></td><td>依赖原生组件（通过 Bridge 通信）</td><td>自绘引擎（Skia），不依赖原生 UI</td></tr><tr><td><strong>性能</strong></td><td>接近原生（复杂场景可能卡顿）</td><td>更接近原生（约 90% 原生性能）</td></tr><tr><td><strong>UI 一致性</strong></td><td>需适配平台差异（如导航栏样式）</td><td>完全统一的像素级控制</td></tr><tr><td><strong>学习曲线</strong></td><td>熟悉 React 的开发者可快速上手</td><td>需学习 Dart 和全新框架体系</td></tr></tbody></table><hr><h4 id="三、典型应用场景" tabindex="-1">三、典型应用场景 <a class="header-anchor" href="#三、典型应用场景" aria-label="Permalink to &quot;三、典型应用场景&quot;">​</a></h4><ol><li><strong>适合 React Native</strong> ： <ul><li>业务逻辑复杂但对图形性能要求不高的场景（如电商、社交、工具类 App）</li><li>需要快速迭代且团队熟悉 JavaScript 生态</li><li>需要动态更新能力（通过 CodePush 等热更新方案）</li></ul></li><li><strong>不适合 React Native</strong> ： <ul><li>高度依赖原生功能（如 AR/VR、复杂动画）</li><li>对启动速度有极致要求（Bridge 通信存在延迟）</li></ul></li></ol><hr><h4 id="四、行业应用案例" tabindex="-1">四、行业应用案例 <a class="header-anchor" href="#四、行业应用案例" aria-label="Permalink to &quot;四、行业应用案例&quot;">​</a></h4><ol><li><strong>成功案例</strong> ： <ul><li>Facebook 主应用（部分模块）</li><li>Instagram（完全由 RN 重构）</li><li>Discord（逐步迁移到 Flutter，但早期使用 RN）</li><li>特斯拉车载系统（部分界面）</li></ul></li><li><strong>局限性案例</strong> ： <ul><li>Airbnb（2018 年弃用 RN，因性能和维护成本问题）</li><li>Udemy（从 RN 迁移回原生开发）</li></ul></li></ol><hr><h4 id="五、技术选型建议" tabindex="-1">五、技术选型建议 <a class="header-anchor" href="#五、技术选型建议" aria-label="Permalink to &quot;五、技术选型建议&quot;">​</a></h4><table tabindex="0"><thead><tr><th>需求场景</th><th>推荐方案</th></tr></thead><tbody><tr><td>团队已有 Web 前端经验</td><td>React Native</td></tr><tr><td>需要最高性能和 UI 控制力</td><td>原生开发（Swift/Kotlin）</td></tr><tr><td>需要同时覆盖移动端和桌面端</td><td>Flutter</td></tr><tr><td>快速验证 MVP 产品</td><td>React Native 或 Flutter</td></tr></tbody></table><hr><h4 id="六、发展趋势-2023-年" tabindex="-1">六、发展趋势（2023 年） <a class="header-anchor" href="#六、发展趋势-2023-年" aria-label="Permalink to &quot;六、发展趋势（2023 年）&quot;">​</a></h4><ol><li><strong>React Native 的改进</strong> ： <ul><li>新架构（Fabric + TurboModules + JSI）大幅提升性能</li><li>支持同步执行和直接内存访问</li><li>微软等大厂持续贡献代码</li></ul></li><li><strong>与 Flutter 的竞争</strong> ： <ul><li>Flutter 在性能和一致性上占优</li><li>React Native 在生态和灵活性上占优</li></ul></li><li><strong>混合开发模式</strong> ： <ul><li>头部应用（如美团、携程）采用「原生 + React Native」混合架构</li><li>关键路径用原生，非核心功能用跨平台框架</li></ul></li></ol><hr><h4 id="关键总结" tabindex="-1">关键总结 <a class="header-anchor" href="#关键总结" aria-label="Permalink to &quot;关键总结&quot;">​</a></h4><ul><li><strong>React Native</strong> 是 Web 技术栈向移动端的延伸，适合<strong>已有前端团队</strong> 的渐进式移动开发</li><li><strong>Flutter</strong> 是更彻底的跨平台方案，适合追求<strong>完全一致体验</strong> 的全新项目</li><li><strong>原生开发</strong> 仍是性能敏感型场景的终极选择</li></ul><p>如果团队熟悉 React 生态，React Native 可显著降低移动端开发门槛；若追求最佳性能和多平台覆盖，Flutter 是更现代的选择。</p>`,56)]))}const g=a(i,[["render",s]]);export{h as __pageData,g as default};
